# This is a basic workflow to help you get started with Actions

name: Terraform Dev Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  terraform-test:
    name: 'Terraform Dev'
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZ_CL_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZ_CL_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUB_ID }}
      ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # Setup and test Terraform Code
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Init Terraform
        run: terraform init
        working-directory: ./ghostdeploy

      - name: Format
        run: terraform fmt 
        working-directory: ./ghostdeploy
      
      - name: Plan
        run: terraform plan -var="mysql-login=${{ secrets.MYSQL_USER }}" -var="mysql-password=${{ secrets.MYSQL_PASSWORD }}"
        working-directory: ./ghostdeploy

